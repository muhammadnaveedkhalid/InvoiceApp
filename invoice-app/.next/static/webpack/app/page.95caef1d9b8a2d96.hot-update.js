"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/quickbooks/api.ts":
/*!***********************************!*\
  !*** ./src/lib/quickbooks/api.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInvoices: function() { return /* binding */ fetchInvoices; },\n/* harmony export */   getAuthUrl: function() { return /* binding */ getAuthUrl; },\n/* harmony export */   getInvoiceById: function() { return /* binding */ getInvoiceById; },\n/* harmony export */   handleCallback: function() { return /* binding */ handleCallback; },\n/* harmony export */   initializeQBO: function() { return /* binding */ initializeQBO; }\n/* harmony export */ });\n// Uncomment and use these imports when you have QuickBooks API credentials\n// import OAuthClient from 'intuit-oauth'\n// import QuickBooks from 'node-quickbooks'\n// const oauthClient = new OAuthClient({\n//   clientId: process.env.QUICKBOOKS_CLIENT_ID!,\n//   clientSecret: process.env.QUICKBOOKS_CLIENT_SECRET!,\n//   environment: 'sandbox',\n//   redirectUri: `${process.env.NEXT_PUBLIC_BASE_URL}/api/auth/callback`,\n// })\n// let qbo: QuickBooks | null = null\nconst API_BASE_URL = \"http://localhost:3000\" || 0;\nconst initializeQBO = (accessToken, realmId)=>{\n    // Uncomment when you have QuickBooks API credentials\n    // qbo = new QuickBooks(\n    //   process.env.QUICKBOOKS_CLIENT_ID!,\n    //   process.env.QUICKBOOKS_CLIENT_SECRET!,\n    //   accessToken,\n    //   false,\n    //   realmId\n    // )\n    console.log(\"Using mock data instead of QuickBooks API\");\n};\nconst fetchInvoices = async ()=>{\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/api/invoices\"));\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch invoices\");\n    }\n    return response.json();\n};\nconst getInvoiceById = async (id)=>{\n    // Clean the ID by removing any 'INV-' prefix and whitespace\n    const cleanId = id.replace(/^(?:inv-)?#?\\s*/i, \"\").trim();\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/api/invoices?id=\").concat(cleanId));\n    if (!response.ok) {\n        if (response.status === 404) {\n            throw new Error(\"Invoice not found. Please check the invoice number and try again.\");\n        }\n        throw new Error(\"Failed to fetch invoice\");\n    }\n    return response.json();\n};\nconst getAuthUrl = ()=>{\n    // Uncomment when you have QuickBooks API credentials\n    // return oauthClient.authorizeUri({\n    //   scope: [\n    //     OAuthClient.scopes.Accounting,\n    //     OAuthClient.scopes.OpenId,\n    //     OAuthClient.scopes.Profile,\n    //     OAuthClient.scopes.Email,\n    //   ],\n    //   state: 'teststate',\n    // })\n    // Mock auth URL\n    return \"http://localhost:3000/api/auth/callback?mock=true\";\n};\nasync function handleCallback(url) {\n    // Uncomment when you have QuickBooks API credentials\n    // const oauthClient = new OAuthClient({\n    //   clientId: process.env.QUICKBOOKS_CLIENT_ID!,\n    //   clientSecret: process.env.QUICKBOOKS_CLIENT_SECRET!,\n    //   environment: process.env.NODE_ENV === 'production' ? 'production' : 'sandbox',\n    //   redirectUri: process.env.QUICKBOOKS_REDIRECT_URI!,\n    // });\n    // const authResponse = await oauthClient.createToken(url);\n    // return authResponse.getJson();\n    // Mock auth response\n    return {\n        access_token: \"mock_token\",\n        refresh_token: \"mock_refresh_token\",\n        expires_in: 3600\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvcXVpY2tib29rcy9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSwyRUFBMkU7QUFDM0UseUNBQXlDO0FBQ3pDLDJDQUEyQztBQUUzQyx3Q0FBd0M7QUFDeEMsaURBQWlEO0FBQ2pELHlEQUF5RDtBQUN6RCw0QkFBNEI7QUFDNUIsMEVBQTBFO0FBQzFFLEtBQUs7QUFFTCxvQ0FBb0M7QUFFcEMsTUFBTUEsZUFBZUMsdUJBQWdDLElBQUk7QUFFbEQsTUFBTUcsZ0JBQWdCLENBQUNDLGFBQXFCQztJQUNqRCxxREFBcUQ7SUFDckQsd0JBQXdCO0lBQ3hCLHVDQUF1QztJQUN2QywyQ0FBMkM7SUFDM0MsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osSUFBSTtJQUNKQyxRQUFRQyxHQUFHLENBQUM7QUFDZCxFQUFDO0FBRU0sTUFBTUMsZ0JBQWdCO0lBQzNCLE1BQU1DLFdBQVcsTUFBTUMsTUFBTSxHQUFnQixPQUFiWCxjQUFhO0lBQzdDLElBQUksQ0FBQ1UsU0FBU0UsRUFBRSxFQUFFO1FBQ2hCLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUNBLE9BQU9ILFNBQVNJLElBQUk7QUFDdEIsRUFBQztBQUVNLE1BQU1DLGlCQUFpQixPQUFPQztJQUNuQyw0REFBNEQ7SUFDNUQsTUFBTUMsVUFBVUQsR0FBR0UsT0FBTyxDQUFDLG9CQUFvQixJQUFJQyxJQUFJO0lBRXZELE1BQU1ULFdBQVcsTUFBTUMsTUFBTSxHQUFtQ00sT0FBaENqQixjQUFhLHFCQUEyQixPQUFSaUI7SUFDaEUsSUFBSSxDQUFDUCxTQUFTRSxFQUFFLEVBQUU7UUFDaEIsSUFBSUYsU0FBU1UsTUFBTSxLQUFLLEtBQUs7WUFDM0IsTUFBTSxJQUFJUCxNQUFPO1FBQ25CO1FBQ0EsTUFBTSxJQUFJQSxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0gsU0FBU0ksSUFBSTtBQUN0QixFQUFDO0FBRU0sTUFBTU8sYUFBYTtJQUN4QixxREFBcUQ7SUFDckQsb0NBQW9DO0lBQ3BDLGFBQWE7SUFDYixxQ0FBcUM7SUFDckMsaUNBQWlDO0lBQ2pDLGtDQUFrQztJQUNsQyxnQ0FBZ0M7SUFDaEMsT0FBTztJQUNQLHdCQUF3QjtJQUN4QixLQUFLO0lBRUwsZ0JBQWdCO0lBQ2hCLE9BQU87QUFDVCxFQUFDO0FBRU0sZUFBZUMsZUFBZUMsR0FBVztJQUM5QyxxREFBcUQ7SUFDckQsd0NBQXdDO0lBQ3hDLGlEQUFpRDtJQUNqRCx5REFBeUQ7SUFDekQsbUZBQW1GO0lBQ25GLHVEQUF1RDtJQUN2RCxNQUFNO0lBQ04sMkRBQTJEO0lBQzNELGlDQUFpQztJQUVqQyxxQkFBcUI7SUFDckIsT0FBTztRQUNMQyxjQUFjO1FBQ2RDLGVBQWU7UUFDZkMsWUFBWTtJQUNkO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9xdWlja2Jvb2tzL2FwaS50cz8yY2E4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludm9pY2UgfSBmcm9tICdAL3R5cGVzL2ludm9pY2UnXHJcbmltcG9ydCB7IG1vY2tJbnZvaWNlcyB9IGZyb20gJy4uL21vY2svaW52b2ljZXMnXHJcblxyXG4vLyBVbmNvbW1lbnQgYW5kIHVzZSB0aGVzZSBpbXBvcnRzIHdoZW4geW91IGhhdmUgUXVpY2tCb29rcyBBUEkgY3JlZGVudGlhbHNcclxuLy8gaW1wb3J0IE9BdXRoQ2xpZW50IGZyb20gJ2ludHVpdC1vYXV0aCdcclxuLy8gaW1wb3J0IFF1aWNrQm9va3MgZnJvbSAnbm9kZS1xdWlja2Jvb2tzJ1xyXG5cclxuLy8gY29uc3Qgb2F1dGhDbGllbnQgPSBuZXcgT0F1dGhDbGllbnQoe1xyXG4vLyAgIGNsaWVudElkOiBwcm9jZXNzLmVudi5RVUlDS0JPT0tTX0NMSUVOVF9JRCEsXHJcbi8vICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5RVUlDS0JPT0tTX0NMSUVOVF9TRUNSRVQhLFxyXG4vLyAgIGVudmlyb25tZW50OiAnc2FuZGJveCcsXHJcbi8vICAgcmVkaXJlY3RVcmk6IGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMfS9hcGkvYXV0aC9jYWxsYmFja2AsXHJcbi8vIH0pXHJcblxyXG4vLyBsZXQgcWJvOiBRdWlja0Jvb2tzIHwgbnVsbCA9IG51bGxcclxuXHJcbmNvbnN0IEFQSV9CQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnXHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVFCTyA9IChhY2Nlc3NUb2tlbjogc3RyaW5nLCByZWFsbUlkOiBzdHJpbmcpID0+IHtcclxuICAvLyBVbmNvbW1lbnQgd2hlbiB5b3UgaGF2ZSBRdWlja0Jvb2tzIEFQSSBjcmVkZW50aWFsc1xyXG4gIC8vIHFibyA9IG5ldyBRdWlja0Jvb2tzKFxyXG4gIC8vICAgcHJvY2Vzcy5lbnYuUVVJQ0tCT09LU19DTElFTlRfSUQhLFxyXG4gIC8vICAgcHJvY2Vzcy5lbnYuUVVJQ0tCT09LU19DTElFTlRfU0VDUkVUISxcclxuICAvLyAgIGFjY2Vzc1Rva2VuLFxyXG4gIC8vICAgZmFsc2UsXHJcbiAgLy8gICByZWFsbUlkXHJcbiAgLy8gKVxyXG4gIGNvbnNvbGUubG9nKCdVc2luZyBtb2NrIGRhdGEgaW5zdGVhZCBvZiBRdWlja0Jvb2tzIEFQSScpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaEludm9pY2VzID0gYXN5bmMgKCk6IFByb21pc2U8SW52b2ljZVtdPiA9PiB7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9pbnZvaWNlc2ApXHJcbiAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggaW52b2ljZXMnKVxyXG4gIH1cclxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRJbnZvaWNlQnlJZCA9IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XHJcbiAgLy8gQ2xlYW4gdGhlIElEIGJ5IHJlbW92aW5nIGFueSAnSU5WLScgcHJlZml4IGFuZCB3aGl0ZXNwYWNlXHJcbiAgY29uc3QgY2xlYW5JZCA9IGlkLnJlcGxhY2UoL14oPzppbnYtKT8jP1xccyovaSwgJycpLnRyaW0oKVxyXG4gIFxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvaW52b2ljZXM/aWQ9JHtjbGVhbklkfWApXHJcbiAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52b2ljZSBub3QgZm91bmQuIFBsZWFzZSBjaGVjayB0aGUgaW52b2ljZSBudW1iZXIgYW5kIHRyeSBhZ2Fpbi5gKVxyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggaW52b2ljZScpXHJcbiAgfVxyXG4gIHJldHVybiByZXNwb25zZS5qc29uKClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEF1dGhVcmwgPSAoKSA9PiB7XHJcbiAgLy8gVW5jb21tZW50IHdoZW4geW91IGhhdmUgUXVpY2tCb29rcyBBUEkgY3JlZGVudGlhbHNcclxuICAvLyByZXR1cm4gb2F1dGhDbGllbnQuYXV0aG9yaXplVXJpKHtcclxuICAvLyAgIHNjb3BlOiBbXHJcbiAgLy8gICAgIE9BdXRoQ2xpZW50LnNjb3Blcy5BY2NvdW50aW5nLFxyXG4gIC8vICAgICBPQXV0aENsaWVudC5zY29wZXMuT3BlbklkLFxyXG4gIC8vICAgICBPQXV0aENsaWVudC5zY29wZXMuUHJvZmlsZSxcclxuICAvLyAgICAgT0F1dGhDbGllbnQuc2NvcGVzLkVtYWlsLFxyXG4gIC8vICAgXSxcclxuICAvLyAgIHN0YXRlOiAndGVzdHN0YXRlJyxcclxuICAvLyB9KVxyXG5cclxuICAvLyBNb2NrIGF1dGggVVJMXHJcbiAgcmV0dXJuICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2F1dGgvY2FsbGJhY2s/bW9jaz10cnVlJ1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodXJsOiBzdHJpbmcpIHtcclxuICAvLyBVbmNvbW1lbnQgd2hlbiB5b3UgaGF2ZSBRdWlja0Jvb2tzIEFQSSBjcmVkZW50aWFsc1xyXG4gIC8vIGNvbnN0IG9hdXRoQ2xpZW50ID0gbmV3IE9BdXRoQ2xpZW50KHtcclxuICAvLyAgIGNsaWVudElkOiBwcm9jZXNzLmVudi5RVUlDS0JPT0tTX0NMSUVOVF9JRCEsXHJcbiAgLy8gICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LlFVSUNLQk9PS1NfQ0xJRU5UX1NFQ1JFVCEsXHJcbiAgLy8gICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/ICdwcm9kdWN0aW9uJyA6ICdzYW5kYm94JyxcclxuICAvLyAgIHJlZGlyZWN0VXJpOiBwcm9jZXNzLmVudi5RVUlDS0JPT0tTX1JFRElSRUNUX1VSSSEsXHJcbiAgLy8gfSk7XHJcbiAgLy8gY29uc3QgYXV0aFJlc3BvbnNlID0gYXdhaXQgb2F1dGhDbGllbnQuY3JlYXRlVG9rZW4odXJsKTtcclxuICAvLyByZXR1cm4gYXV0aFJlc3BvbnNlLmdldEpzb24oKTtcclxuXHJcbiAgLy8gTW9jayBhdXRoIHJlc3BvbnNlXHJcbiAgcmV0dXJuIHtcclxuICAgIGFjY2Vzc190b2tlbjogJ21vY2tfdG9rZW4nLFxyXG4gICAgcmVmcmVzaF90b2tlbjogJ21vY2tfcmVmcmVzaF90b2tlbicsXHJcbiAgICBleHBpcmVzX2luOiAzNjAwLFxyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0JBU0VfVVJMIiwiaW5pdGlhbGl6ZVFCTyIsImFjY2Vzc1Rva2VuIiwicmVhbG1JZCIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaEludm9pY2VzIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJqc29uIiwiZ2V0SW52b2ljZUJ5SWQiLCJpZCIsImNsZWFuSWQiLCJyZXBsYWNlIiwidHJpbSIsInN0YXR1cyIsImdldEF1dGhVcmwiLCJoYW5kbGVDYWxsYmFjayIsInVybCIsImFjY2Vzc190b2tlbiIsInJlZnJlc2hfdG9rZW4iLCJleHBpcmVzX2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/quickbooks/api.ts\n"));

/***/ })

});